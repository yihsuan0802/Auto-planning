/**
 * @fileoverview added by tsickle
 * Generated from: lib/chart.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Felix Itzenplitz. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at
 * https://github.com/cebor/angular-highcharts/blob/master/LICENSE
 */
import { Inject, Injectable, InjectionToken } from '@angular/core';
import * as Highcharts from 'highcharts';
/** @type {?} */
export var HIGHCHARTS_MODULES = new InjectionToken('HighchartsModules');
var ChartService = /** @class */ (function () {
    function ChartService(chartModules) {
        this.chartModules = chartModules;
    }
    /**
     * @return {?}
     */
    ChartService.prototype.initModules = /**
     * @return {?}
     */
    function () {
        this.chartModules.forEach((/**
         * @param {?} chartModule
         * @return {?}
         */
        function (chartModule) {
            chartModule(Highcharts);
        }));
    };
    ChartService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    ChartService.ctorParameters = function () { return [
        { type: Array, decorators: [{ type: Inject, args: [HIGHCHARTS_MODULES,] }] }
    ]; };
    return ChartService;
}());
export { ChartService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ChartService.prototype.chartModules;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhcnQuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXItaGlnaGNoYXJ0cy8iLCJzb3VyY2VzIjpbImxpYi9jaGFydC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFRQSxPQUFPLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxjQUFjLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDbkUsT0FBTyxLQUFLLFVBQVUsTUFBTSxZQUFZLENBQUM7O0FBRXpDLE1BQU0sS0FBSyxrQkFBa0IsR0FBRyxJQUFJLGNBQWMsQ0FBUSxtQkFBbUIsQ0FBQztBQUU5RTtJQUVFLHNCQUFnRCxZQUFtQjtRQUFuQixpQkFBWSxHQUFaLFlBQVksQ0FBTztJQUFJLENBQUM7Ozs7SUFFeEUsa0NBQVc7OztJQUFYO1FBQ0UsSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPOzs7O1FBQUMsVUFBQSxXQUFXO1lBQ25DLFdBQVcsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUMxQixDQUFDLEVBQUMsQ0FBQztJQUNMLENBQUM7O2dCQVJGLFVBQVU7Ozs7NENBRUksTUFBTSxTQUFDLGtCQUFrQjs7SUFPeEMsbUJBQUM7Q0FBQSxBQVRELElBU0M7U0FSWSxZQUFZOzs7Ozs7SUFDWCxvQ0FBdUQiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgRmVsaXggSXR6ZW5wbGl0ei4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdFxuICogaHR0cHM6Ly9naXRodWIuY29tL2NlYm9yL2FuZ3VsYXItaGlnaGNoYXJ0cy9ibG9iL21hc3Rlci9MSUNFTlNFXG4gKi9cbmltcG9ydCB7IEluamVjdCwgSW5qZWN0YWJsZSwgSW5qZWN0aW9uVG9rZW4gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCAqIGFzIEhpZ2hjaGFydHMgZnJvbSAnaGlnaGNoYXJ0cyc7XG5cbmV4cG9ydCBsZXQgSElHSENIQVJUU19NT0RVTEVTID0gbmV3IEluamVjdGlvblRva2VuPGFueVtdPignSGlnaGNoYXJ0c01vZHVsZXMnKTtcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIENoYXJ0U2VydmljZSB7XG4gIGNvbnN0cnVjdG9yKEBJbmplY3QoSElHSENIQVJUU19NT0RVTEVTKSBwcml2YXRlIGNoYXJ0TW9kdWxlczogYW55W10pIHsgfVxuXG4gIGluaXRNb2R1bGVzKCkge1xuICAgIHRoaXMuY2hhcnRNb2R1bGVzLmZvckVhY2goY2hhcnRNb2R1bGUgPT4ge1xuICAgICAgY2hhcnRNb2R1bGUoSGlnaGNoYXJ0cyk7XG4gICAgfSk7XG4gIH1cbn1cbiJdfQ==