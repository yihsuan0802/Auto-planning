import { ElementRef, ViewContainerRef, QueryList, Renderer2, Injector } from '@angular/core';
import { IComponentBase } from '@syncfusion/ej2-angular-base';
import { Gantt } from '@syncfusion/ej2-gantt';
import { ColumnsDirective } from './columns.directive';
import { AddDialogFieldsDirective } from './adddialogfields.directive';
import { EditDialogFieldsDirective } from './editdialogfields.directive';
import { DayWorkingTimeCollectionDirective } from './dayworkingtime.directive';
import { HolidaysDirective } from './holidays.directive';
import { EventMarkersDirective } from './eventmarkers.directive';
import * as ɵngcc0 from '@angular/core';
export declare const inputs: string[];
export declare const outputs: string[];
export declare const twoWays: string[];
/**
 * `ejs-gantt` represents the Angular Gantt Component.
 * ```html
 * <ejs-gantt [dataSource]='data' allowSelection='true' allowSorting='true'></ejs-gantt>
 * ```
 */
export declare class GanttComponent extends Gantt implements IComponentBase {
    private ngEle;
    private srenderer;
    private viewContainerRef;
    private injector;
    context: any;
    tagObjects: any;
    childColumns: QueryList<ColumnsDirective>;
    childAddDialogFields: QueryList<AddDialogFieldsDirective>;
    childEditDialogFields: QueryList<EditDialogFieldsDirective>;
    childDayWorkingTime: QueryList<DayWorkingTimeCollectionDirective>;
    childHolidays: QueryList<HolidaysDirective>;
    childEventMarkers: QueryList<EventMarkersDirective>;
    tags: string[];
    dataSourceChange: any;
    /**
     * The parent task bar template that renders customized parent task bars from the given template.
     * @default null
     */
    parentTaskbarTemplate: any;
    /**
     * The milestone template that renders customized milestone task from the given template.
     * @default null
     */
    milestoneTemplate: any;
    /**
     * The task bar template that renders customized child task bars from the given template.
     * @default null
     */
    taskbarTemplate: any;
    labelSettings_rightLabel: any;
    labelSettings_leftLabel: any;
    labelSettings_taskLabel: any;
    tooltipSettings_taskbar: any;
    tooltipSettings_baseline: any;
    tooltipSettings_connectorLine: any;
    tooltipSettings_editing: any;
    constructor(ngEle: ElementRef, srenderer: Renderer2, viewContainerRef: ViewContainerRef, injector: Injector);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    ngAfterContentChecked(): void;
    registerEvents: (eventList: string[]) => void;
    addTwoWay: (propList: string[]) => void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<GanttComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<GanttComponent, "ejs-gantt", never, { "addDialogFields": "addDialogFields"; "allowExcelExport": "allowExcelExport"; "allowFiltering": "allowFiltering"; "allowKeyboard": "allowKeyboard"; "allowPdfExport": "allowPdfExport"; "allowReordering": "allowReordering"; "allowResizing": "allowResizing"; "allowRowDragAndDrop": "allowRowDragAndDrop"; "allowSelection": "allowSelection"; "allowSorting": "allowSorting"; "allowUnscheduledTasks": "allowUnscheduledTasks"; "autoFocusTasks": "autoFocusTasks"; "baselineColor": "baselineColor"; "collapseAllParentTasks": "collapseAllParentTasks"; "columnMenuItems": "columnMenuItems"; "columns": "columns"; "connectorLineBackground": "connectorLineBackground"; "connectorLineWidth": "connectorLineWidth"; "contextMenuItems": "contextMenuItems"; "dataSource": "dataSource"; "dateFormat": "dateFormat"; "dayWorkingTime": "dayWorkingTime"; "disableHtmlEncode": "disableHtmlEncode"; "durationUnit": "durationUnit"; "editDialogFields": "editDialogFields"; "editSettings": "editSettings"; "enableContextMenu": "enableContextMenu"; "enablePersistence": "enablePersistence"; "enablePredecessorValidation": "enablePredecessorValidation"; "enableRtl": "enableRtl"; "eventMarkers": "eventMarkers"; "filterSettings": "filterSettings"; "gridLines": "gridLines"; "height": "height"; "highlightWeekends": "highlightWeekends"; "holidays": "holidays"; "includeWeekend": "includeWeekend"; "labelSettings": "labelSettings"; "locale": "locale"; "milestoneTemplate": "milestoneTemplate"; "parentTaskbarTemplate": "parentTaskbarTemplate"; "projectEndDate": "projectEndDate"; "projectStartDate": "projectStartDate"; "query": "query"; "renderBaseline": "renderBaseline"; "resourceFields": "resourceFields"; "resourceIDMapping": "resourceIDMapping"; "resourceNameMapping": "resourceNameMapping"; "resources": "resources"; "rowHeight": "rowHeight"; "searchSettings": "searchSettings"; "selectedRowIndex": "selectedRowIndex"; "selectionSettings": "selectionSettings"; "showColumnMenu": "showColumnMenu"; "showInlineNotes": "showInlineNotes"; "sortSettings": "sortSettings"; "splitterSettings": "splitterSettings"; "taskFields": "taskFields"; "taskMode": "taskMode"; "taskType": "taskType"; "taskbarHeight": "taskbarHeight"; "taskbarTemplate": "taskbarTemplate"; "timelineSettings": "timelineSettings"; "toolbar": "toolbar"; "tooltipSettings": "tooltipSettings"; "treeColumnIndex": "treeColumnIndex"; "validateManualTasksOnLinking": "validateManualTasksOnLinking"; "viewType": "viewType"; "width": "width"; "workUnit": "workUnit"; "workWeek": "workWeek"; }, { "actionBegin": "actionBegin"; "actionComplete": "actionComplete"; "actionFailure": "actionFailure"; "beforeExcelExport": "beforeExcelExport"; "beforePdfExport": "beforePdfExport"; "beforeTooltipRender": "beforeTooltipRender"; "cellDeselected": "cellDeselected"; "cellDeselecting": "cellDeselecting"; "cellEdit": "cellEdit"; "cellSelected": "cellSelected"; "cellSelecting": "cellSelecting"; "collapsed": "collapsed"; "collapsing": "collapsing"; "columnDrag": "columnDrag"; "columnDragStart": "columnDragStart"; "columnDrop": "columnDrop"; "columnMenuClick": "columnMenuClick"; "columnMenuOpen": "columnMenuOpen"; "contextMenuClick": "contextMenuClick"; "contextMenuOpen": "contextMenuOpen"; "created": "created"; "dataBound": "dataBound"; "destroyed": "destroyed"; "endEdit": "endEdit"; "excelExportComplete": "excelExportComplete"; "excelHeaderQueryCellInfo": "excelHeaderQueryCellInfo"; "excelQueryCellInfo": "excelQueryCellInfo"; "expanded": "expanded"; "expanding": "expanding"; "headerCellInfo": "headerCellInfo"; "load": "load"; "onMouseMove": "onMouseMove"; "onTaskbarClick": "onTaskbarClick"; "pdfColumnHeaderQueryCellInfo": "pdfColumnHeaderQueryCellInfo"; "pdfExportComplete": "pdfExportComplete"; "pdfQueryCellInfo": "pdfQueryCellInfo"; "pdfQueryTaskbarInfo": "pdfQueryTaskbarInfo"; "pdfQueryTimelineCellInfo": "pdfQueryTimelineCellInfo"; "queryCellInfo": "queryCellInfo"; "queryTaskbarInfo": "queryTaskbarInfo"; "recordDoubleClick": "recordDoubleClick"; "resizeStart": "resizeStart"; "resizeStop": "resizeStop"; "resizing": "resizing"; "rowDataBound": "rowDataBound"; "rowDeselected": "rowDeselected"; "rowDeselecting": "rowDeselecting"; "rowDrag": "rowDrag"; "rowDragStart": "rowDragStart"; "rowDragStartHelper": "rowDragStartHelper"; "rowDrop": "rowDrop"; "rowSelected": "rowSelected"; "rowSelecting": "rowSelecting"; "splitterResizeStart": "splitterResizeStart"; "splitterResized": "splitterResized"; "splitterResizing": "splitterResizing"; "taskbarEdited": "taskbarEdited"; "taskbarEditing": "taskbarEditing"; "toolbarClick": "toolbarClick"; "dataSourceChange": "dataSourceChange"; }, ["parentTaskbarTemplate", "milestoneTemplate", "taskbarTemplate", "labelSettings_rightLabel", "labelSettings_leftLabel", "labelSettings_taskLabel", "tooltipSettings_taskbar", "tooltipSettings_baseline", "tooltipSettings_connectorLine", "tooltipSettings_editing", "childColumns", "childAddDialogFields", "childEditDialogFields", "childDayWorkingTime", "childHolidays", "childEventMarkers"], never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2FudHQuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbImdhbnR0LmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVsZW1lbnRSZWYsIFZpZXdDb250YWluZXJSZWYsIFF1ZXJ5TGlzdCwgUmVuZGVyZXIyLCBJbmplY3RvciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSUNvbXBvbmVudEJhc2UgfSBmcm9tICdAc3luY2Z1c2lvbi9lajItYW5ndWxhci1iYXNlJztcbmltcG9ydCB7IEdhbnR0IH0gZnJvbSAnQHN5bmNmdXNpb24vZWoyLWdhbnR0JztcbmltcG9ydCB7IENvbHVtbnNEaXJlY3RpdmUgfSBmcm9tICcuL2NvbHVtbnMuZGlyZWN0aXZlJztcbmltcG9ydCB7IEFkZERpYWxvZ0ZpZWxkc0RpcmVjdGl2ZSB9IGZyb20gJy4vYWRkZGlhbG9nZmllbGRzLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBFZGl0RGlhbG9nRmllbGRzRGlyZWN0aXZlIH0gZnJvbSAnLi9lZGl0ZGlhbG9nZmllbGRzLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBEYXlXb3JraW5nVGltZUNvbGxlY3Rpb25EaXJlY3RpdmUgfSBmcm9tICcuL2RheXdvcmtpbmd0aW1lLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBIb2xpZGF5c0RpcmVjdGl2ZSB9IGZyb20gJy4vaG9saWRheXMuZGlyZWN0aXZlJztcbmltcG9ydCB7IEV2ZW50TWFya2Vyc0RpcmVjdGl2ZSB9IGZyb20gJy4vZXZlbnRtYXJrZXJzLmRpcmVjdGl2ZSc7XG5leHBvcnQgZGVjbGFyZSBjb25zdCBpbnB1dHM6IHN0cmluZ1tdO1xuZXhwb3J0IGRlY2xhcmUgY29uc3Qgb3V0cHV0czogc3RyaW5nW107XG5leHBvcnQgZGVjbGFyZSBjb25zdCB0d29XYXlzOiBzdHJpbmdbXTtcbi8qKlxuICogYGVqcy1nYW50dGAgcmVwcmVzZW50cyB0aGUgQW5ndWxhciBHYW50dCBDb21wb25lbnQuXG4gKiBgYGBodG1sXG4gKiA8ZWpzLWdhbnR0IFtkYXRhU291cmNlXT0nZGF0YScgYWxsb3dTZWxlY3Rpb249J3RydWUnIGFsbG93U29ydGluZz0ndHJ1ZSc+PC9lanMtZ2FudHQ+XG4gKiBgYGBcbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgR2FudHRDb21wb25lbnQgZXh0ZW5kcyBHYW50dCBpbXBsZW1lbnRzIElDb21wb25lbnRCYXNlIHtcbiAgICBwcml2YXRlIG5nRWxlO1xuICAgIHByaXZhdGUgc3JlbmRlcmVyO1xuICAgIHByaXZhdGUgdmlld0NvbnRhaW5lclJlZjtcbiAgICBwcml2YXRlIGluamVjdG9yO1xuICAgIGNvbnRleHQ6IGFueTtcbiAgICB0YWdPYmplY3RzOiBhbnk7XG4gICAgY2hpbGRDb2x1bW5zOiBRdWVyeUxpc3Q8Q29sdW1uc0RpcmVjdGl2ZT47XG4gICAgY2hpbGRBZGREaWFsb2dGaWVsZHM6IFF1ZXJ5TGlzdDxBZGREaWFsb2dGaWVsZHNEaXJlY3RpdmU+O1xuICAgIGNoaWxkRWRpdERpYWxvZ0ZpZWxkczogUXVlcnlMaXN0PEVkaXREaWFsb2dGaWVsZHNEaXJlY3RpdmU+O1xuICAgIGNoaWxkRGF5V29ya2luZ1RpbWU6IFF1ZXJ5TGlzdDxEYXlXb3JraW5nVGltZUNvbGxlY3Rpb25EaXJlY3RpdmU+O1xuICAgIGNoaWxkSG9saWRheXM6IFF1ZXJ5TGlzdDxIb2xpZGF5c0RpcmVjdGl2ZT47XG4gICAgY2hpbGRFdmVudE1hcmtlcnM6IFF1ZXJ5TGlzdDxFdmVudE1hcmtlcnNEaXJlY3RpdmU+O1xuICAgIHRhZ3M6IHN0cmluZ1tdO1xuICAgIGRhdGFTb3VyY2VDaGFuZ2U6IGFueTtcbiAgICAvKipcbiAgICAgKiBUaGUgcGFyZW50IHRhc2sgYmFyIHRlbXBsYXRlIHRoYXQgcmVuZGVycyBjdXN0b21pemVkIHBhcmVudCB0YXNrIGJhcnMgZnJvbSB0aGUgZ2l2ZW4gdGVtcGxhdGUuXG4gICAgICogQGRlZmF1bHQgbnVsbFxuICAgICAqL1xuICAgIHBhcmVudFRhc2tiYXJUZW1wbGF0ZTogYW55O1xuICAgIC8qKlxuICAgICAqIFRoZSBtaWxlc3RvbmUgdGVtcGxhdGUgdGhhdCByZW5kZXJzIGN1c3RvbWl6ZWQgbWlsZXN0b25lIHRhc2sgZnJvbSB0aGUgZ2l2ZW4gdGVtcGxhdGUuXG4gICAgICogQGRlZmF1bHQgbnVsbFxuICAgICAqL1xuICAgIG1pbGVzdG9uZVRlbXBsYXRlOiBhbnk7XG4gICAgLyoqXG4gICAgICogVGhlIHRhc2sgYmFyIHRlbXBsYXRlIHRoYXQgcmVuZGVycyBjdXN0b21pemVkIGNoaWxkIHRhc2sgYmFycyBmcm9tIHRoZSBnaXZlbiB0ZW1wbGF0ZS5cbiAgICAgKiBAZGVmYXVsdCBudWxsXG4gICAgICovXG4gICAgdGFza2JhclRlbXBsYXRlOiBhbnk7XG4gICAgbGFiZWxTZXR0aW5nc19yaWdodExhYmVsOiBhbnk7XG4gICAgbGFiZWxTZXR0aW5nc19sZWZ0TGFiZWw6IGFueTtcbiAgICBsYWJlbFNldHRpbmdzX3Rhc2tMYWJlbDogYW55O1xuICAgIHRvb2x0aXBTZXR0aW5nc190YXNrYmFyOiBhbnk7XG4gICAgdG9vbHRpcFNldHRpbmdzX2Jhc2VsaW5lOiBhbnk7XG4gICAgdG9vbHRpcFNldHRpbmdzX2Nvbm5lY3RvckxpbmU6IGFueTtcbiAgICB0b29sdGlwU2V0dGluZ3NfZWRpdGluZzogYW55O1xuICAgIGNvbnN0cnVjdG9yKG5nRWxlOiBFbGVtZW50UmVmLCBzcmVuZGVyZXI6IFJlbmRlcmVyMiwgdmlld0NvbnRhaW5lclJlZjogVmlld0NvbnRhaW5lclJlZiwgaW5qZWN0b3I6IEluamVjdG9yKTtcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgbmdBZnRlckNvbnRlbnRDaGVja2VkKCk6IHZvaWQ7XG4gICAgcmVnaXN0ZXJFdmVudHM6IChldmVudExpc3Q6IHN0cmluZ1tdKSA9PiB2b2lkO1xuICAgIGFkZFR3b1dheTogKHByb3BMaXN0OiBzdHJpbmdbXSkgPT4gdm9pZDtcbn1cbiJdfQ==